classdef app1 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                 matlab.ui.Figure
        ImageStitchingToolPanel  matlab.ui.container.Panel
        Panel_2                  matlab.ui.container.Panel
        StitchedImageButton      matlab.ui.control.Button
        UIAxes2                  matlab.ui.control.UIAxes
        Panel                    matlab.ui.container.Panel
        BrowseImageButton        matlab.ui.control.Button
        UIAxes                   matlab.ui.control.UIAxes
        Panel_3                  matlab.ui.container.Panel
        Image                    matlab.ui.control.Image
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: BrowseImageButton
        function BrowseImage(app, event)
            global directory;
            directory = uigetdir('Select a Directory');
fileList = dir(fullfile(directory, '*.jpg'));

% Create a new figure
figure;

% Create an axes object
axesHandle = app.UIAxes;

for i = 1:numel(fileList)
    imagePath = fullfile(directory, fileList(i).name);
    image = imread(imagePath);
    
    % Process the image (e.g., perform some operations)
    % Your image processing code here
    
    % Display the image on the axes
    hold on;
    imshow(image, 'Parent', axesHandle);
    
    % Title each image
    title(axesHandle, ['Image ', num2str(i)]);
    
    % Pause to allow for visualization (optional)
    pause(3);  % Adjust the pause duration as needed
end

        end

        % Button pushed function: StitchedImageButton
        function stitchedImage(app, event)
            global directory;
            buildingDir = fullfile(directory);

% Load images from the 'buildings' folder
buildingScene = imageDatastore(buildingDir);
                                                                                                                                                                                                          % Display images to be stitched.
montage(buildingScene.Files)                                                                                                                                                  % Read the first image from the image set.
I = readimage(buildingScene,1);

% Initialize features for I(1)
grayImage = im2gray(I);
points = detectSURFFeatures(grayImage);
[features, points] = extractFeatures(grayImage,points);

% Initialize all the transformations to the identity matrix. Note that the
% projective transformation is used here because the building images are fairly
% close to the camera. For scenes captured from a further distance, you can use
% affine transformations.
numImages = numel(buildingScene.Files);
tforms(numImages) = projtform2d;

% Initialize variable to hold image sizes.
imageSize = zeros(numImages,2);

% Iterate over remaining image pairs
for n = 2:numImages
    % Store points and features for I(n-1).
    pointsPrevious = points;
    featuresPrevious = features;
        
    % Read I(n).
    I = readimage(buildingScene, n);
    
    % Convert image to grayscale.
    grayImage = im2gray(I);    
    
    % Save image size.
    imageSize(n,:) = size(grayImage);
    
    % Detect and extract SURF features for I(n).
    points = detectSURFFeatures(grayImage);    
    [features, points] = extractFeatures(grayImage, points);
  
    % Find correspondences between I(n) and I(n-1).
    indexPairs = matchFeatures(features, featuresPrevious, 'Unique', true);
       
    matchedPoints = points(indexPairs(:,1), :);
    matchedPointsPrev = pointsPrevious(indexPairs(:,2), :);        
    
    % Estimate the transformation between I(n) and I(n-1).
    tforms(n) = estgeotform2d(matchedPoints, matchedPointsPrev,...
        'projective', 'Confidence', 99.9, 'MaxNumTrials', 2000);
    
    % Compute T(1) * T(2) * ... * T(n-1) * T(n).
    tforms(n).A = tforms(n-1).A * tforms(n).A; 
end                                                                                                                                                                                                      % Compute the output limits for each transformation.
for i = 1:numel(tforms)           
    [xlim(i,:), ylim(i,:)] = outputLimits(tforms(i), [1 imageSize(i,2)], [1 imageSize(i,1)]);    
end

avgXLim = mean(xlim, 2);
[~,idx] = sort(avgXLim);
centerIdx = floor((numel(tforms)+1)/2);
centerImageIdx = idx(centerIdx);

Tinv = invert(tforms(centerImageIdx));
for i = 1:numel(tforms)    
    tforms(i).A = Tinv.A * tforms(i).A;
end   

for i = 1:numel(tforms)           
    [xlim(i,:), ylim(i,:)] = outputLimits(tforms(i), [1 imageSize(i,2)], [1 imageSize(i,1)]);
end

maxImageSize = max(imageSize);

% Find the minimum and maximum output limits. 
xMin = min([1; xlim(:)]);
xMax = max([maxImageSize(2); xlim(:)]);

yMin = min([1; ylim(:)]);
yMax = max([maxImageSize(1); ylim(:)]);

% Width and height of panorama.
width  = round(xMax - xMin);
height = round(yMax - yMin);

% Initialize the "empty" panorama.
panorama = zeros([height width 3], 'like', I);                                                                                                                     blender = vision.AlphaBlender('Operation', 'Binary mask', ...
    'MaskSource', 'Input port');  

% Create a 2-D spatial reference object defining the size of the panorama.
xLimits = [xMin xMax];
yLimits = [yMin yMax];
panoramaView = imref2d([height width], xLimits, yLimits);

% Create the panorama.
for i = 1:numImages
    
    I = readimage(buildingScene, i);   
   
    % Transform I into the panorama.
    warpedImage = imwarp(I, tforms(i), 'OutputView', panoramaView);
                  
    % Generate a binary mask.    
    mask = imwarp(true(size(I,1),size(I,2)), tforms(i), 'OutputView', panoramaView);
    
    % Overlay the warpedImage onto the panorama.
    panorama = step(blender, panorama, warpedImage, mask);
end

figure
imshow(panorama,'Parent',app.UIAxes2)
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Get the file path for locating images
            pathToMLAPP = fileparts(mfilename('fullpath'));

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 945 652];
            app.UIFigure.Name = 'MATLAB App';

            % Create ImageStitchingToolPanel
            app.ImageStitchingToolPanel = uipanel(app.UIFigure);
            app.ImageStitchingToolPanel.ForegroundColor = [1 1 1];
            app.ImageStitchingToolPanel.BorderWidth = 3;
            app.ImageStitchingToolPanel.TitlePosition = 'centertop';
            app.ImageStitchingToolPanel.Title = '----------------------------Image Stitching Tool ---------------------------';
            app.ImageStitchingToolPanel.BackgroundColor = [0.0588 0.0549 0.0549];
            app.ImageStitchingToolPanel.FontName = 'Palatino';
            app.ImageStitchingToolPanel.FontWeight = 'bold';
            app.ImageStitchingToolPanel.FontSize = 33;
            app.ImageStitchingToolPanel.Position = [2 1 944 652];

            % Create Panel_3
            app.Panel_3 = uipanel(app.ImageStitchingToolPanel);
            app.Panel_3.BackgroundColor = [1 1 1];
            app.Panel_3.Position = [421 33 100 542];

            % Create Image
            app.Image = uiimage(app.Panel_3);
            app.Image.Position = [22 290 58 48];
            app.Image.ImageSource = fullfile(pathToMLAPP, 'pngwing.com (2).png');

            % Create Panel
            app.Panel = uipanel(app.ImageStitchingToolPanel);
            app.Panel.BorderWidth = 4;
            app.Panel.BackgroundColor = [0.0157 0.0157 0.5216];
            app.Panel.Position = [24 33 413 542];

            % Create UIAxes
            app.UIAxes = uiaxes(app.Panel);
            zlabel(app.UIAxes, 'Z')
            app.UIAxes.XColor = 'none';
            app.UIAxes.XTick = [];
            app.UIAxes.YColor = 'none';
            app.UIAxes.YTick = [];
            app.UIAxes.Position = [9 123 378 388];

            % Create BrowseImageButton
            app.BrowseImageButton = uibutton(app.Panel, 'push');
            app.BrowseImageButton.ButtonPushedFcn = createCallbackFcn(app, @BrowseImage, true);
            app.BrowseImageButton.BackgroundColor = [0.6706 0 0.6706];
            app.BrowseImageButton.FontName = 'Palatino';
            app.BrowseImageButton.FontSize = 18;
            app.BrowseImageButton.FontWeight = 'bold';
            app.BrowseImageButton.FontColor = [1 1 1];
            app.BrowseImageButton.Position = [81 56 254 40];
            app.BrowseImageButton.Text = 'Browse Image';

            % Create Panel_2
            app.Panel_2 = uipanel(app.ImageStitchingToolPanel);
            app.Panel_2.BorderWidth = 4;
            app.Panel_2.BackgroundColor = [0.6196 0 0.6196];
            app.Panel_2.Position = [509 33 406 542];

            % Create UIAxes2
            app.UIAxes2 = uiaxes(app.Panel_2);
            zlabel(app.UIAxes2, 'Z')
            app.UIAxes2.XColor = 'none';
            app.UIAxes2.XTick = [];
            app.UIAxes2.YColor = 'none';
            app.UIAxes2.YTick = [];
            app.UIAxes2.Position = [7 122 372 389];

            % Create StitchedImageButton
            app.StitchedImageButton = uibutton(app.Panel_2, 'push');
            app.StitchedImageButton.ButtonPushedFcn = createCallbackFcn(app, @stitchedImage, true);
            app.StitchedImageButton.BackgroundColor = [0.0078 0.0078 0.702];
            app.StitchedImageButton.FontName = 'Palatino';
            app.StitchedImageButton.FontSize = 18;
            app.StitchedImageButton.FontWeight = 'bold';
            app.StitchedImageButton.FontColor = [1 1 1];
            app.StitchedImageButton.Position = [72 56 258 40];
            app.StitchedImageButton.Text = 'Stitched Image';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = app1

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
